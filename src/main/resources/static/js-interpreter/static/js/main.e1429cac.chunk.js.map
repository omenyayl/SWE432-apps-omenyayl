{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["JavaScriptInterpreter","props","state","output","input","Card","className","Typography","color","gutterBottom","CardContent","TextField","multiline","helperText","onChange","e","onInputChanged","fullWidth","CardActions","Button","variant","onClick","onClickButtonExecute","disabled","value","this","evaluation","safeEval","toString","setState","target","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWAYMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,MAAO,IAJQ,E,qDAOT,IAAD,OACP,OACE,6BACE,6DACA,kBAACC,EAAA,EAAD,CAAMC,UAAU,gBACd,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,oBAGA,kBAACC,EAAA,EAAD,KACE,yBAAKJ,UAAU,YACb,kBAACK,EAAA,EAAD,CACIC,WAAW,EACXC,WAAY,kDACZC,SAAU,SAACC,GAAQ,EAAKC,eAAeD,IACvCE,WAAW,MAGnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAS,YAAaZ,MAAO,UAAWa,QAAS,WAAQ,EAAKC,yBAAtE,aAIJ,kBAACjB,EAAA,EAAD,CAAMC,UAAU,4BACd,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UAGA,kBAACC,EAAA,EAAD,KACE,6BACE,8BAAUa,UAAU,EAAMjB,UAAU,cAAckB,MAAOC,KAAKvB,MAAMC,e,6CAQ9E,IAAIuB,EAAa,GACjB,IACEA,EAAaC,IAAS,eAAD,OACFF,KAAKvB,MAAME,MADT,SAGrB,MAAOW,GACPW,EAAaX,EAAEa,WAEjBH,KAAKI,SAAS,CACZ1B,OAAQuB,M,qCAGGX,GACbU,KAAKvB,MAAME,MAAQW,EAAEe,OAAON,U,GAzDIO,IAAMC,WAqE3BC,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QChEc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e1429cac.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {\n  Button,\n  TextField,\n  Card,\n  CardContent,\n  CardActions,\n} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport safeEval from \"safe-eval\";\n\nclass JavaScriptInterpreter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      output: '',\n      input: ''\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>Simple JavaScript Interpreter</h1>\n        <Card className=\"card-content\">\n          <Typography color=\"textSecondary\" gutterBottom>\n            JavaScript Input\n          </Typography>\n          <CardContent>\n            <div className=\"margin-1\">\n              <TextField\n                  multiline={true}\n                  helperText={\"Input Code *remember to add a return statement*\"}\n                  onChange={(e) => { this.onInputChanged(e) }}\n                  fullWidth={true}/>\n            </div>\n          </CardContent>\n          <CardActions>\n            <Button variant={'contained'} color={\"primary\"} onClick={() => { this.onClickButtonExecute() }}>Execute</Button>\n          </CardActions>\n        </Card>\n\n        <Card className=\"card-content output-card\">\n          <Typography color=\"textSecondary\" gutterBottom>\n            Result\n          </Typography>\n          <CardContent>\n            <div>\n              <textarea disabled={true} className='output-text' value={this.state.output}/>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n  onClickButtonExecute() {\n    let evaluation = '';\n    try {\n      evaluation = safeEval(\n          `(function(){${this.state.input}})()`\n      );\n    } catch (e) {\n      evaluation = e.toString();\n    }\n    this.setState({\n      output: evaluation\n    })\n  }\n  onInputChanged(e) {\n    this.state.input = e.target.value;\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JavaScriptInterpreter/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}